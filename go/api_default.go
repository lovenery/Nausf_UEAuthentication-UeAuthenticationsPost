/*
 * AUSF API
 *
 * OpenAPI specification for AUSF
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"encoding/json"
)

// EapAuthMethod - 
func EapAuthMethod(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// UeAuthenticationsAuthCtxId5gAkaConfirmationPut - 
func UeAuthenticationsAuthCtxId5gAkaConfirmationPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// UeAuthenticationsPost - 
func UeAuthenticationsPost(w http.ResponseWriter, r *http.Request) {
	var ueAuthenticationCtx UeAuthenticationCtx

	json.NewDecoder(r.Body).Decode(&ueAuthenticationCtx)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	if ueAuthenticationCtx.ServingNetworkName != "" {
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, "HTTP: 200\n")
	} else {
		var problemDetails = ProblemDetails {
			Title: "Invalid Parameter",
			Status: http.StatusForbidden,
			InvalidParams: []InvalidParam{InvalidParam{Param: "ServingNetworkName", Reason: "ServingNetworkName should not be empty"}},
		}
		problemDetails.Cause = "AUTHENTICATION_REJECTED"

		w.WriteHeader(http.StatusForbidden)
		json.NewEncoder(w).Encode(&problemDetails)
	}

	fmt.Printf("ueAuthenticationCtx: %+v\n", ueAuthenticationCtx)
	fmt.Fprintf(w, "Done\n")
}
